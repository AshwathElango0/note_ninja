Project Report : Stock Price Predictor Qverview: The idea of the project is to download stock information from Yahoo Finance, such as daily opening prices, closing prices, etc; and make predictions for the same in the immediate future, using an LSTM-based neural network. The program aims to be more utilitarian, sending the user emails about stock summaries and statistics and can notify the user with an alert if the closing prices are higher than expected_ robust program, designed to handle errors and validate input; and memory-efficient as it doesn"t need to store data on the local system: In-depth summary: Creation of ML model: Using the yfinance library of Python stock data is downloaded from Yahoo Finance via their API 0O0 records of opening prices_high prices HOw prices_ closing prices and volume ol shares tradedlthe livemetrics used indexed by their dates are downloaded stored in a Pandas dataframe Rows with null values are dropped as precautionary measure(hasn t been necessary yet) The data pulled for training and testing Apple s stock data This data is stored in a cSv file for visualization purposes and recording: The data is scaled down t0 values between and using MinMaxScaler( ) from the scikit-learn library: We generate data-label pairs by selecting 50 consecutive records as the input and making the 51st record as the output: We iterate through all the records, generating pairs, and then take 80% of them as training data and the rest as testing data The ML model is built using Tensorflow and its Keras API. It is an LSTM-based model(has LSTM layers of fifty units each, followed by Dense ayers(5 units each, separated by Dropout layer): uses the weighted Adam optimiser and mean-squared-error loss: The model is trained on the training data and after evaluating its performance on the test data we were able to tune the hyperparameters and improve its architecture. The model saved as keras model: and
Project Report : Stock Price Predictor Stock price predictor: The initial stage: The predictor program is heavily compartmentalized_ with almost all its components being functions. The program makes use of numpy; pandas, matplotlib, tensorfiow, re, io, email, smtplib and sklearn libraries The program starts by loading the saved ML model, trained in the process mentioned above, by using the load_model() function of keras: The program then asks the user to enter ticker symbol for the company whose stock info they'd like to download(Eg AAPL for Apple, HDB for HDFC Bank) Upon entry; the download occurs and the main() function of the program is triggered. If there is an error during download due to incorrect ticker symbols or any other technical difficulty, the error is handled by try except block; and the program ends after informing the user of the same If there are no errors_ then the main() function proceeds to identify the most recent date(get last_date() function) for which stock information was downloaded and gives the user range out of which they can choose any day to predict the stock information for: The reason for giving day range is because predicting for future days requires the information of the days before them and since the model's predictions will always have some error; big or small, the accumulation will completely offset long-term predictions_ The user $ input is validated and the program ensures that they can only enter the date in the correct format and also only enter valid date using the validate_date() function; which makes use of regular strings and the re module_ Upon verifying the date, the program makes predictions for the date the user entered. The predictions are fitted with an inverse transform to remove the effects of the scaling and give the correct output: The predicted value for each of the five metrics is then printed in the terminallconsole and the user wants it; graph is plotted for opening and closing prices over the last 50 days(there is chance they might not be consecutive in case the website was missing data for some days_ SO we just use the last 50 days for which we have complete information), also contains the day and
Project Report : Stock Price Predictor predicted opening and closing prices(using matplotlib pyplot) , as these 2 are considered the most important metrics. The plot is line graph; with and legend_ that also contains rolling averages_ for 10 day intervals, for both metrics_ The Second Stage(Sending Stock Summary)= The next part of the program offers the user the choice to get either the statistical summary of the ast days or the last 30 days. Again, the user's input is validated and errors are handled; to ensure smooth proceedings The user is asked if they wish to receive an email containing the summary: If they opt in;, are asked for their email address(basic validation occurs to at least ensure that the input follows the general structure of an email address, using regular strings and the re module)(validate_email() function), and are sent an email(using smtplib and email modules)(send_summary() function) with the means and standard deviations of each of the five metrics and plot of the opening and closing prices, including the predicted prices of the day of their choice. The plot is line graph made using matplotlib pyplot, similar to that of the initial stage_ In order to avoid storing locally the plots everytime the program is run_ temporary file-like object is created in memory(RAM) using the module: Supposing they choose the 30 summary; as there are large number of days, rolling averages of day periods are also added to the graph: If the user opts out of receiving an email, the means and deviations of the time period chosen by them are simply printed out in the terminal: The Third Stage(Sending Alert Email) The user is then asked if like to be notified via email if the closing price of the day chosen for prediction has exceeded an alert price of their choice. If they opt in; once again, they are sent an email(using send_alert() function) informing them of the predicted closing price , which says that the closing price exceeds the alert price_ Individual Contributions: Rishi D(AI23BTECHT1O04) : Gathering of training data, development and optimisation of ML model, tuning of hyperparameters: grid _ they days they (
Project Report : Stock Price Predictor Helped with appropriate shaping of data in the main program, suggested ideas on metrics to be displayed and utilities to be added(such as the variety of summaries] Pawan Surya(AI23BTECH11016) Initial stage of main program; developed UI to accept input from the user; downloading required data using yfinance, storing and preprocessing data for making predictions using the model Plotted graphs for displaying predicted metrics Ashwath Elangovan(AI23BTEECHT1OO1) : Plotting of graphs for summaries, calculating of metrics for the types of summaries, including rolling averages, structuring and sending emails using smtplib and email; validating of inputs using re, creating tile-like objects using io_ Helped tune model hyperparameters modified architecture and introduced features where predict for further dates_ the model predicts for preceding dates and uses them as input as opposed to skipping over gaps_